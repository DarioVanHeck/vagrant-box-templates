---
# Global provisioners will run against every node in the order specified.
# These provisioners run after all node specific provisioners if defined.
#
# For node specific provisioners add at the node level
provisioners: []
  # - type: shell
  #   inline: |
  #       if [ -f /etc/os-release ]; then
  #           os_name="$(awk -F= '/^NAME/{ print $2 }' /etc/os-release | sed 's/"//g')"
  #           os_version_id="$(awk -F= '/^VERSION_ID/{ print $2}' /etc/os-release | sed 's/"//g')"
  #           echo $os_name
  #           echo $os_version_id
  #       fi
  #   privileged: true
  # - type: shell
  #   path:
  #     - scripts/test.sh
  #   privileged: false
  # - type: ansible_local
  #   playbooks:
  #     - /vagrant/playbooks/test.yml
  # - type: ansible
  #   playbooks:
  #     - playbooks/test.yml

# Synced folders
# Additional synced folders.
# By default scripts and playbooks are synced, and available in each node as:
# /playbooks, /scripts, /vagrant/playbooks, and /vagrant/scripts. They are
# duplicated because of the symlinks within /vagrant. This is as designed.
synced_folders: []
  # - type: nfs
  #   src: example1/
  #   mountpoint: /example1
  # - type: rsync
  #   src: example2/
  #   mountpoint: /example2

# Define nodes which are required for the environment you intend on creating.
nodes:
  - name: node0
    ansible_groups:
      - test_nodes
    box: mrlesmithjr/bionic64
    # Defines if nodes guest OS is a desktop flavor
    desktop: false
    disks: []
      # - size: 10
      #   controller: "SATA Controller"
      # - size: 10
      #   controller: "SATA Controller"
    interfaces: []
      # - ip: 192.168.250.10
      #   auto_config: true
      #   method: static
      # - ip: 192.168.1.10
      #   auto_config: false
      #   method: static
      #   network_name: network-1
    linked_clone: true
    mem: 512
    provision: false
    # Node specific provisioners
    # For Ansible, only ansible_local type will work
    provisioners: []
      # - type: shell
      #   inline: |
      #       if [ -f /etc/os-release ]; then
      #           os_name="$(awk -F= '/^NAME/{ print $2 }' /etc/os-release | sed 's/"//g')"
      #           os_version_id="$(awk -F= '/^VERSION_ID/{ print $2}' /etc/os-release | sed 's/"//g')"
      #           echo $os_name
      #           echo $os_version_id
      #       fi
      #   privileged: true
      # - type: shell
      #   path:
      #   - scripts/test.sh
      #   privileged: false
      # - type: ansible_local
      #   playbooks:
      #     - /vagrant/playbooks/test.yml
    vcpu: 1
    port_forwards: []
      # - guest: 80
      #   host: 8080
      # - guest: 443
      #   host: 4433
    # Defines if nodes guest OS is Windows
    windows: false
  # - name: node1
  #   ansible_groups:
  #     - test_nodes
  #   box: mrlesmithjr/bionic64
  #   desktop: false
  #   disks: []
  #   interfaces:
  #     - ip: 192.168.250.11
  #       auto_config: true
  #       method: static
  #   linked_clone: true
  #   mem: 512
  #   provision: true
  #   # Node specific provisioners
  #   provisioners: []
  #   vcpu: 1
  #   port_forwards: []
  #   windows: false
